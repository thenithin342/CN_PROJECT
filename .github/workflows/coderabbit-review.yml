name: CodeRabbit Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - master
      - develop

permissions:
  pull-requests: write
  contents: read

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: CodeRabbit Review
        uses: coderabbitai/openapi-python@v1
        with:
          api_key: ${{ secrets.CODERABBIT_API_KEY }}
          max_file_size: 1000
          github_token: ${{ secrets.GITHUB_TOKEN }}
          review_simple_changes: true
          review_comment_lgtm: false
          path: |
            client/
            server/
            common/
            *.py
          exclude: |
            **/__pycache__/**
            **/*.pyc
            **/.git/**
            **/logs/**

  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint flake8 black mypy pytest pytest-cov
      
      - name: Lint with flake8
        run: |
          flake8 client/ server/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 client/ server/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: Check code formatting with black
        run: |
          black --check client/ server/ common/
        continue-on-error: true
      
      - name: Type check with mypy
        run: |
          mypy client/ server/ common/ --ignore-missing-imports
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install security scanner
        run: |
          pip install bandit safety
      
      - name: Run Bandit security scan
        run: |
          bandit -r client/ server/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Check Bandit for high/critical findings
        run: |
          python << 'EOF'
          import json
          import sys
          
          try:
              with open('bandit-report.json', 'r') as f:
                  report = json.load(f)
              
              high_critical_count = 0
              severity_map = {'HIGH': 3, 'MEDIUM': 2, 'LOW': 1, 'INFO': 0}
              
              for file in report.get('results', []):
                  severity = file.get('issue_severity', '')
                  if severity in severity_map and severity_map[severity] >= severity_map['HIGH']:
                      high_critical_count += 1
                      print(f"Critical/High finding: {file.get('test_name')} - {file.get('issue_text')}")
              
              if high_critical_count > 0:
                  print(f"\nFound {high_critical_count} HIGH or CRITICAL security issues. Failing job.")
                  sys.exit(1)
              else:
                  print("No high/critical security issues found in Bandit scan.")
          except FileNotFoundError:
              print("bandit-report.json not found")
              sys.exit(1)
          except Exception as e:
              print(f"Error parsing bandit report: {e}")
              sys.exit(1)
          EOF
      
      - name: Check dependencies for vulnerabilities
        run: |
          safety check --json -o safety-report.json
        continue-on-error: true
      
      - name: Check Safety for high/critical findings
        run: |
          python << 'EOF'
          import json
          import sys
          
          try:
              with open('safety-report.json', 'r') as f:
                  report = json.load(f)
              
              high_critical_count = 0
              
              for vuln in report:
                  severity = vuln.get('severity', '').upper()
                  if severity in ['HIGH', 'CRITICAL']:
                      high_critical_count += 1
                      print(f"Critical/High vulnerability: {vuln.get('package')} - {vuln.get('vulnerability')}")
              
              if high_critical_count > 0:
                  print(f"\nFound {high_critical_count} HIGH or CRITICAL vulnerabilities. Failing job.")
                  sys.exit(1)
              else:
                  print("No high/critical vulnerabilities found in Safety check.")
          except FileNotFoundError:
              print("safety-report.json not found")
              sys.exit(1)
          except Exception as e:
              print(f"Error parsing safety report: {e}")
              sys.exit(1)
          EOF

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install radon mccabe
      
      - name: Calculate code complexity
        run: |
          radon cc client/ server/ -a --total-average
        continue-on-error: true
      
      - name: Calculate maintainability index
        run: |
          radon mi client/ server/ -nb
        continue-on-error: true
